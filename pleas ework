local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
Name = "FrontEdge Hub 1.0",
Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
LoadingTitle = "FrontEdge Hub 1.0",
LoadingSubtitle = "Developed by JustAUserPrivate",
Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

DisableRayfieldPrompts = false,
DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

ConfigurationSaving = {
Enabled = true,
FolderName = nil, -- Create a custom folder for your hub/game
FileName = "fehub_index.js"
},

Discord = {
Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
Invite = "epjAuXBc", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
RememberJoins = true -- Set this to false to make them join the discord every time they load it up
},

KeySystem = true, -- Set this to true to use our key system
KeySettings = {
Title = "Key System For F-E Hub 1.0",
Subtitle = "//Key System// In Discord Or Youtube",
Note = "Join Server For Any Questions Provided", -- Use this to tell the user how to get a key
FileName = "Key File", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
Key = {"https://pastebin.com/raw/qfDLM0Fx"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
}
})

local MainTab = Window:CreateTab("Starter Player", 4483362458) -- Title, Image
local Slider = MainTab:CreateSlider({
Name = "W-S Changer",
Range = {0, 50},
Increment = 1,
Suffix = "Speed",
CurrentValue = 16,
Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
Callback = function(Value)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
end,
})

local Slider = MainTab:CreateSlider({
Name = "J-P Changer",
Range = {0, 150},
Increment = 1,
Suffix = "Jump-Power",
CurrentValue = 50,
Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
Callback = function(Value)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
end,
})

local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera -- Get the camera

-- Example UI Library Slider
local Slider = MainTab:CreateSlider({
Name = "FOV Slider",
Range = {50, 120}, -- Min and Max FOV values
Increment = 1, -- Adjust in steps of 1
Suffix = " FOV", -- Shows 'FOV' in the slider UI
CurrentValue = 70, -- Default FOV
Flag = "FOV_Slider",
Callback = function(Value)
camera.FieldOfView = (Value) -- Set the camera FOV based on the slider
end,
})

local GravitySlider = MainTab:CreateSlider({
Name = "Gravity Changer",
Range = {0, 500}, -- Adjust range as needed
Increment = 1,
Suffix = " Gravity",
CurrentValue = 196, -- Default Roblox gravity
Flag = "Slider2", -- Unique flag for saving settings
Callback = function(Value)
game.Workspace.Gravity = Value
end,
})

local noclipEnabled = false -- NoClip state

local NoClipButton = MainTab:CreateButton({
Name = "Toggle NoClip",
Callback = function()
noclipEnabled = not noclipEnabled -- Toggle state

if noclipEnabled then
game:GetService("RunService").Stepped:Connect(function()
if noclipEnabled and game.Players.LocalPlayer.Character then
for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
if v:IsA("BasePart") and v.CanCollide then
v.CanCollide = false
end
end
end
end)
end
end,
})

local FlyButton = MainTab:CreateButton({
Name = "Fly GuiV3",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
end,
})

local TeleportButton = MainTab:CreateButton({
Name = "Teleport to Random Player",
Callback = function()
local player = game.Players.LocalPlayer
local players = game.Players:GetPlayers()

if #players > 1 then -- Ensure there are other players in the game
local randomPlayer
repeat
randomPlayer = players[math.random(1, #players)]
until randomPlayer ~= player and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart")

-- Teleport local player to the random player's position
player.Character.HumanoidRootPart.CFrame = randomPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0) -- Slightly above to avoid clipping
end
end,
})

local ResetButton = MainTab:CreateButton({
Name = "Force Reset",
Callback = function()
local player = game.Players.LocalPlayer
if player.Character then
player.Character:BreakJoints() -- Instantly resets the character
end
end,
})

local MainTab = Window:CreateTab("ü§´NSFWü§´", 4483362458) -- Title, Image
local MainSection = MainTab:CreateSection("Scripts //Read TOS//")

local Button = MainTab:CreateButton({
Name = "Sex Script #1",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/cnPthPiGon/RamDRuomFirirueieiid8didj/refs/heads/main/Fe%20sus%20hub"))()
end,
})


local Button = MainTab:CreateButton({
Name = "Jerk Off",
Callback = function()
loadstring(game:HttpGet("https://pastefy.app/wa3v2Vgm/raw"))()
end,
})


local Button = MainTab:CreateButton({
Name = "Sex Animation Gui",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/ShutUpJamesTheLoser/freaky/refs/heads/main/fe",true))()
end,
})


local Button = MainTab:CreateButton({
Name = "BlowJob",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/ShutUpJamesTheLoser/freakyv94/refs/heads/main/freakyv94yes", true))()
end,
})


local Button = MainTab:CreateButton({
Name = "Li Code 1.3",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/AlgariBot/lua/refs/heads/Lua-Script-Executor/SexMachine.lua"))()
end,
})


local Button = MainTab:CreateButton({
Name = "Face Fuck",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/AKadminlol/Facefuck/refs/heads/main/CreditsbyAK"))()
end,
})


MainTab:CreateButton({
   Name = "Twerk",
   Callback = function()
      repeat
         local AnimationId = "179224234"
         local Anim = Instance.new("Animation")
         Anim.AnimationId = "rbxassetid://" .. AnimationId
         local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
         k:Play()
         k:AdjustSpeed(2) -- Adjust speed to a reasonable value
         wait(0.125)

         local Humanoid = game.Players.LocalPlayer.Character.Humanoid
         local ActiveTracks = Humanoid:GetPlayingAnimationTracks()

         for _, v in pairs(ActiveTracks) do
            v:Stop()
         end
         wait()
      until game.Players.LocalPlayer.Character.Humanoid.Health == 0
   end -- Missing end added here!
})

local MainTab = Window:CreateTab(" ü§∏üèª Animation Gui's ü§∏üèª", 4483362458) -- Title, Image
local MainSection = MainTab:CreateSection("Scripts Are Paid Or Free")

local Button = MainTab:CreateButton({
    Name = "Disbelief Hub FE",
    Callback = function()
        -- Make sure to load and execute the external script safely
        local success, result = pcall(function()
            loadstring(game:HttpGet("https://gist.githubusercontent.com/MelonsStuff/75b93caa7fa2db08dbec1fdfe6771826/raw/7cc9bb79c766896a3c527be52a7be870a6c9e371/Disbelief.txt"))()
        end)
        
        -- If an error occurs while loading the script, print it
        if not success then
            warn("Error loading external script: " .. result)
        end
    end,
    })

    local Button = MainTab:CreateButton({
        Name = "HackerMan Hub FE", -- The name of the button that will appear in the GUI
        Callback = function() -- When the button is clicked
            loadstring(game:HttpGet("https://raw.githubusercontent.com/DeBug-X0Exo-Red/HackerMan_Hub/refs/heads/main/GUI"))() -- Runs the code from the provided URL
        end,
    })

    local Button = MainTab:CreateButton({
      Name = "FE Sad Boy",
      Callback = function()
          loadstring(game:HttpGet("https://pastebin.com/raw/hgPJbwF0"))()
      end,
  })

  MainTab:CreateButton({
   Name = "Among Us V2",
   Callback = function()
      loadstring(game:HttpGet('https://rawscripts.net/raw/Nothing-Fe-Among-Us-V2-(R6)-3224'))()
   end,
})

Rayfield:Notify({
   Title = "WARNING",
   Content = "These Last Animations Only Work On A Game IN Discord!",
   Duration = 6.5,
   Image = 4483362458,
})

MainTab:CreateButton({
   Name = "FE Chill",
   Callback = function()
      loadstring(game:HttpGet('https://rawscripts.net/raw/Just-a-baseplate.-Fe-Chill-14103'))()
   end,
})

MainTab:CreateButton({
   Name = "Vr Animation",
   Callback = function()
      loadstring(game:HttpGet('https://rawscripts.net/raw/Just-a-baseplate.-Fe-Clovr-14102'))()
   end
})

MainTab:CreateButton({
   Name = "FE Hug People",
   Callback = function()
      local success, err = pcall(function()
         loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Hug-Gui-R6-17818"))()
      end)
      if not success then
         warn("Error loading script: " .. err)
      end
   end,
})

MainTab:CreateButton({
   Name = "Animation GUI Emotes",
   Callback = function()
      loadstring(game:HttpGet("https://gist.githubusercontent.com/MelonsStuff/f018928d2f010789a150b4924e279b16/raw/8de399eb9cbccbde430fcd37270cd4ff171f8b8e/AnimationGUI.txt"))()
   end,
})

MainTab:CreateButton({
   Name = "Booty Offender",
   Callback = function()
     -- // TAUNT
-- reanimate by MyWorld#4430 discord.gg/pYVHtSJmEY
local v3_net, v3_808 = Vector3.new(0, 25.1, 0), Vector3.new(8, 0, 8)
local function getNetlessVelocity(realPartVelocity)
	local mag = realPartVelocity.Magnitude
	if mag > 1 then
		local unit = realPartVelocity.Unit
		if (unit.Y > 0.25) or (unit.Y < -0.75) then
			return unit * (25.1 / unit.Y)
		end
	end
	return v3_net + realPartVelocity * v3_808
end
local simradius = "shp" -- simulation radius (net bypass) method
-- "shp" - sethiddenproperty
-- "ssr" - setsimulationradius
-- false - disable
local simrad = 1000 -- simulation radius value
local healthHide = false -- moves your head away every 3 seconds so players dont see your health bar (alignmode 4 only)
local reclaim = true -- if you lost control over a part this will move your primary part to the part so you get it back (alignmode 4)
local novoid = true -- prevents parts from going under workspace.FallenPartsDestroyHeight if you control them (alignmode 4 only)
local physp = nil -- PhysicalProperties.new(0.01, 0, 1, 0, 0) --sets .CustomPhysicalProperties to this for each part
local noclipAllParts = false -- set it to true if you want noclip
local antiragdoll = true -- removes hingeConstraints and ballSocketConstraints from your character
local newanimate = false -- disables the animate script and enables after reanimation
local discharscripts = true -- disables all localScripts parented to your character before reanimation
local R15toR6 = true -- tries to convert your character to r6 if its r15
local hatcollide = false -- makes hats cancollide (credit to ShownApe) (works only with reanimate method 0)
local humState16 = true -- enables collisions for limbs before the humanoid dies (using hum:ChangeState)
local addtools = false -- puts all tools from backpack to character and lets you hold them after reanimation
local hedafterneck = true -- disable aligns for head and enable after neck or torso is removed
local loadtime = game:GetService("Players").RespawnTime + 0.5 -- anti respawn delay
local method = 3 -- reanimation method
-- methods:
-- 0 - breakJoints (takes [loadtime] seconds to load)
-- 1 - limbs
-- 2 - limbs + anti respawn
-- 3 - limbs + breakJoints after [loadtime] seconds
-- 4 - remove humanoid + breakJoints
-- 5 - remove humanoid + limbst
local alignmode = 4 -- AlignPosition mode
-- modes:
-- 1 - AlignPosition rigidity enabled true
-- 2 - 2 AlignPositions rigidity enabled both true and false
-- 3 - AlignPosition rigidity enabled false
-- 4 - CFrame
local flingpart = "HumanoidRootPart" -- name of the part or the hat used for flinging
-- the fling function
-- usage: fling(target, duration, velocity)
-- target can be set to: basePart, CFrame, Vector3, character model or humanoid (flings at mouse.Hit if argument not provided))
-- duration (fling time in seconds) can be set to a number or a string convertable to the number (0.5s if not provided),
-- velocity (fling part rotation velocity) can be set to a vector3 value (Vector3.new(20000, 20000, 20000) if not provided)

local lp = game:GetService("Players").LocalPlayer
local rs, ws, sg = game:GetService("RunService"), game:GetService("Workspace"), game:GetService("StarterGui")
local stepped, heartbeat, renderstepped = rs.Stepped, rs.Heartbeat, rs.RenderStepped
local twait, tdelay, rad, inf, abs, clamp = task.wait, task.delay, math.rad, math.huge, math.abs, math.clamp
local cf, v3 = CFrame.new, Vector3.new
local angles = CFrame.Angles
local v3_0, cf_0 = v3(0, 0, 0), cf(0, 0, 0)

local c = lp.Character
if not (c and c.Parent) then
	return
end

c:GetPropertyChangedSignal("Parent"):Connect(function()
	if not (c and c.Parent) then
		c = nil
	end
end)

local clone, destroy, getchildren, getdescendants, isa = c.Clone, c.Destroy, c.GetChildren, c.GetDescendants, c.IsA

local function gp(parent, name, className)
	if typeof(parent) == "Instance" then
		for i, v in pairs(getchildren(parent)) do
			if (v.Name == name) and isa(v, className) then
				return v
			end
		end
	end
	return nil
end

local fenv = getfenv()

local shp = fenv.sethiddenproperty or fenv.set_hidden_property or fenv.set_hidden_prop or fenv.sethiddenprop
local ssr = fenv.setsimulationradius
	or fenv.set_simulation_radius
	or fenv.set_sim_radius
	or fenv.setsimradius
	or fenv.setsimrad
	or fenv.set_sim_rad

healthHide = healthHide and ((method == 0) or (method == 3)) and gp(c, "Head", "BasePart")

local reclaim, lostpart = reclaim and c.PrimaryPart, nil

local function align(Part0, Part1)
	local att0 = Instance.new("Attachment")
	att0.Position, att0.Orientation, att0.Name = v3_0, v3_0, "att0_" .. Part0.Name
	local att1 = Instance.new("Attachment")
	att1.Position, att1.Orientation, att1.Name = v3_0, v3_0, "att1_" .. Part1.Name

	if alignmode == 4 then
		local hide = false
		if Part0 == healthHide then
			healthHide = false
			tdelay(0, function()
				while twait(2.9) and Part0 and c do
					hide = #Part0:GetConnectedParts() == 1
					twait(0.1)
					hide = false
				end
			end)
		end

		local rot = rad(0.05)
		local con0, con1 = nil, nil
		con0 = stepped:Connect(function()
			if not (Part0 and Part1) then
				return con0:Disconnect() and con1:Disconnect()
			end
			Part0.RotVelocity = Part1.RotVelocity
		end)
		local lastpos = Part0.Position
		con1 = heartbeat:Connect(function(delta)
			if not (Part0 and Part1 and att1) then
				return con0:Disconnect() and con1:Disconnect()
			end
			if not Part0.Anchored and (Part0.ReceiveAge == 0) then
				if lostpart == Part0 then
					lostpart = nil
				end
				rot = -rot
				local newcf = Part1.CFrame * att1.CFrame * angles(0, 0, rot)
				if Part1.Velocity.Magnitude > 0.01 then
					Part0.Velocity = getNetlessVelocity(Part1.Velocity)
				else
					Part0.Velocity = getNetlessVelocity((newcf.Position - lastpos) / delta)
				end
				lastpos = newcf.Position
				if lostpart and (Part0 == reclaim) then
					newcf = lostpart.CFrame
				elseif hide then
					newcf = newcf + v3(0, 3000, 0)
				end
				if novoid and (newcf.Y < ws.FallenPartsDestroyHeight + 0.1) then
					newcf = newcf + v3(0, ws.FallenPartsDestroyHeight + 0.1 - newcf.Y, 0)
				end
				Part0.CFrame = newcf
			elseif
				not Part0.Anchored
				and (abs(Part0.Velocity.X) < 45)
				and (abs(Part0.Velocity.Y) < 25)
				and (abs(Part0.Velocity.Z) < 45)
			then
				lostpart = Part0
			end
		end)
	else
		Part0.CustomPhysicalProperties = physp
		if (alignmode == 1) or (alignmode == 2) then
			local ape = Instance.new("AlignPosition")
			ape.MaxForce, ape.MaxVelocity, ape.Responsiveness = inf, inf, inf
			ape.ReactionForceEnabled, ape.RigidityEnabled, ape.ApplyAtCenterOfMass = false, true, false
			ape.Attachment0, ape.Attachment1, ape.Name = att0, att1, "AlignPositionRtrue"
			ape.Parent = att0
		end

		if (alignmode == 2) or (alignmode == 3) then
			local apd = Instance.new("AlignPosition")
			apd.MaxForce, apd.MaxVelocity, apd.Responsiveness = inf, inf, inf
			apd.ReactionForceEnabled, apd.RigidityEnabled, apd.ApplyAtCenterOfMass = false, false, false
			apd.Attachment0, apd.Attachment1, apd.Name = att0, att1, "AlignPositionRfalse"
			apd.Parent = att0
		end

		local ao = Instance.new("AlignOrientation")
		ao.MaxAngularVelocity, ao.MaxTorque, ao.Responsiveness = inf, inf, inf
		ao.PrimaryAxisOnly, ao.ReactionTorqueEnabled, ao.RigidityEnabled = false, false, false
		ao.Attachment0, ao.Attachment1 = att0, att1
		ao.Parent = att0

		local con0, con1 = nil, nil
		local vel = Part0.Velocity
		con0 = renderstepped:Connect(function()
			if not (Part0 and Part1) then
				return con0:Disconnect() and con1:Disconnect()
			end
			Part0.Velocity = vel
		end)
		local lastpos = Part0.Position
		con1 = heartbeat:Connect(function(delta)
			if not (Part0 and Part1) then
				return con0:Disconnect() and con1:Disconnect()
			end
			vel = Part0.Velocity
			if Part1.Velocity.Magnitude > 0.01 then
				Part0.Velocity = getNetlessVelocity(Part1.Velocity)
			else
				Part0.Velocity = getNetlessVelocity((Part0.Position - lastpos) / delta)
			end
			lastpos = Part0.Position
		end)
	end

	att0:GetPropertyChangedSignal("Parent"):Connect(function()
		Part0 = att0.Parent
		if not isa(Part0, "BasePart") then
			att0 = nil
			if lostpart == Part0 then
				lostpart = nil
			end
			Part0 = nil
		end
	end)
	att0.Parent = Part0

	att1:GetPropertyChangedSignal("Parent"):Connect(function()
		Part1 = att1.Parent
		if not isa(Part1, "BasePart") then
			att1 = nil
			Part1 = nil
		end
	end)
	att1.Parent = Part1
end

local function respawnrequest()
	local ccfr, c = ws.CurrentCamera.CFrame, lp.Character
	lp.Character = nil
	lp.Character = c
	local con = nil
	con = ws.CurrentCamera.Changed:Connect(function(prop)
		if (prop ~= "Parent") and (prop ~= "CFrame") then
			return
		end
		ws.CurrentCamera.CFrame = ccfr
		con:Disconnect()
	end)
end

local destroyhum = (method == 4) or (method == 5)
local breakjoints = (method == 0) or (method == 4)
local antirespawn = (method == 0) or (method == 2) or (method == 3)

hatcollide = hatcollide and (method == 0)

addtools = addtools and lp:FindFirstChildOfClass("Backpack")

if type(simrad) ~= "number" then
	simrad = 1000
end
if shp and (simradius == "shp") then
	tdelay(0, function()
		while c do
			shp(lp, "SimulationRadius", simrad)
			heartbeat:Wait()
		end
	end)
elseif ssr and (simradius == "ssr") then
	tdelay(0, function()
		while c do
			ssr(simrad)
			heartbeat:Wait()
		end
	end)
end

if antiragdoll then
	antiragdoll = function(v)
		if isa(v, "HingeConstraint") or isa(v, "BallSocketConstraint") then
			v.Parent = nil
		end
	end
	for i, v in pairs(getdescendants(c)) do
		antiragdoll(v)
	end
	c.DescendantAdded:Connect(antiragdoll)
end

if antirespawn then
	respawnrequest()
end

if method == 0 then
	twait(loadtime)
	if not c then
		return
	end
end

if discharscripts then
	for i, v in pairs(getdescendants(c)) do
		if isa(v, "LocalScript") then
			v.Disabled = true
		end
	end
elseif newanimate then
	local animate = gp(c, "Animate", "LocalScript")
	if animate and not animate.Disabled then
		animate.Disabled = true
	else
		newanimate = false
	end
end

if addtools then
	for i, v in pairs(getchildren(addtools)) do
		if isa(v, "Tool") then
			v.Parent = c
		end
	end
end

pcall(function()
	settings().Physics.AllowSleep = false
	settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
end)

local OLDscripts = {}

for i, v in pairs(getdescendants(c)) do
	if v.ClassName == "Script" then
		OLDscripts[v.Name] = true
	end
end

local scriptNames = {}

for i, v in pairs(getdescendants(c)) do
	if isa(v, "BasePart") then
		local newName, exists = tostring(i), true
		while exists do
			exists = OLDscripts[newName]
			if exists then
				newName = newName .. "_"
			end
		end
		table.insert(scriptNames, newName)
		Instance.new("Script", v).Name = newName
	end
end

local hum = c:FindFirstChildOfClass("Humanoid")
if hum then
	for i, v in pairs(hum:GetPlayingAnimationTracks()) do
		v:Stop()
	end
end
c.Archivable = true
local cl = clone(c)
if hum and humState16 then
	hum:ChangeState(Enum.HumanoidStateType.Physics)
	if destroyhum then
		twait(1.6)
	end
end
if destroyhum then
	pcall(destroy, hum)
end

if not c then
	return
end

local head, torso, root =
	gp(c, "Head", "BasePart"),
	gp(c, "Torso", "BasePart") or gp(c, "UpperTorso", "BasePart"),
	gp(c, "HumanoidRootPart", "BasePart")
if hatcollide then
	pcall(destroy, torso)
	pcall(destroy, root)
	pcall(destroy, c:FindFirstChildOfClass("BodyColors") or gp(c, "Health", "Script"))
end

local model = Instance.new("Model", c)
model:GetPropertyChangedSignal("Parent"):Connect(function()
	if not (model and model.Parent) then
		model = nil
	end
end)

for i, v in pairs(getchildren(c)) do
	if v ~= model then
		if addtools and isa(v, "Tool") then
			for i1, v1 in pairs(getdescendants(v)) do
				if v1 and v1.Parent and isa(v1, "BasePart") then
					local bv = Instance.new("BodyVelocity")
					bv.Velocity, bv.MaxForce, bv.P, bv.Name = v3_0, v3(1000, 1000, 1000), 1250, "bv_" .. v.Name
					bv.Parent = v1
				end
			end
		end
		v.Parent = model
	end
end

if breakjoints then
	model:BreakJoints()
else
	if head and torso then
		for i, v in pairs(getdescendants(model)) do
			if isa(v, "JointInstance") then
				local save = false
				if (v.Part0 == torso) and (v.Part1 == head) then
					save = true
				end
				if (v.Part0 == head) and (v.Part1 == torso) then
					save = true
				end
				if save then
					if hedafterneck then
						hedafterneck = v
					end
				else
					pcall(destroy, v)
				end
			end
		end
	end
	if method == 3 then
		task.delay(loadtime, pcall, model.BreakJoints, model)
	end
end

cl.Parent = ws
for i, v in pairs(getchildren(cl)) do
	v.Parent = c
end
pcall(destroy, cl)

local uncollide, noclipcon = nil, nil
if noclipAllParts then
	uncollide = function()
		if c then
			for i, v in pairs(getdescendants(c)) do
				if isa(v, "BasePart") then
					v.CanCollide = false
				end
			end
		else
			noclipcon:Disconnect()
		end
	end
else
	uncollide = function()
		if model then
			for i, v in pairs(getdescendants(model)) do
				if isa(v, "BasePart") then
					v.CanCollide = false
				end
			end
		else
			noclipcon:Disconnect()
		end
	end
end
noclipcon = stepped:Connect(uncollide)
uncollide()

for i, scr in pairs(getdescendants(model)) do
	if (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
		local Part0 = scr.Parent
		if isa(Part0, "BasePart") then
			for i1, scr1 in pairs(getdescendants(c)) do
				if (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
					local Part1 = scr1.Parent
					if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
						align(Part0, Part1)
						pcall(destroy, scr)
						pcall(destroy, scr1)
						break
					end
				end
			end
		end
	end
end

for i, v in pairs(getdescendants(c)) do
	if v and v.Parent and (not v:IsDescendantOf(model)) then
		if isa(v, "Decal") then
			v.Transparency = 1
		elseif isa(v, "BasePart") then
			v.Transparency = 1
			v.Anchored = false
		elseif isa(v, "ForceField") then
			v.Visible = false
		elseif isa(v, "Sound") then
			v.Playing = false
		elseif
			isa(v, "BillboardGui")
			or isa(v, "SurfaceGui")
			or isa(v, "ParticleEmitter")
			or isa(v, "Fire")
			or isa(v, "Smoke")
			or isa(v, "Sparkles")
		then
			v.Enabled = false
		end
	end
end

if newanimate then
	local animate = gp(c, "Animate", "LocalScript")
	if animate then
		animate.Disabled = false
	end
end

if addtools then
	for i, v in pairs(getchildren(c)) do
		if isa(v, "Tool") then
			v.Parent = addtools
		end
	end
end

local hum0, hum1 = model:FindFirstChildOfClass("Humanoid"), c:FindFirstChildOfClass("Humanoid")
if hum0 then
	hum0:GetPropertyChangedSignal("Parent"):Connect(function()
		if not (hum0 and hum0.Parent) then
			hum0 = nil
		end
	end)
end
if hum1 then
	hum1:GetPropertyChangedSignal("Parent"):Connect(function()
		if not (hum1 and hum1.Parent) then
			hum1 = nil
		end
	end)

	ws.CurrentCamera.CameraSubject = hum1
	local camSubCon = nil
	local function camSubFunc()
		camSubCon:Disconnect()
		if c and hum1 then
			ws.CurrentCamera.CameraSubject = hum1
		end
	end
	camSubCon = renderstepped:Connect(camSubFunc)
	if hum0 then
		hum0:GetPropertyChangedSignal("Jump"):Connect(function()
			if hum1 then
				hum1.Jump = hum0.Jump
			end
		end)
	else
		respawnrequest()
	end
end

local rb = Instance.new("BindableEvent", c)
rb.Event:Connect(function()
	pcall(destroy, rb)
	sg:SetCore("ResetButtonCallback", true)
	if destroyhum then
		if c then
			c:BreakJoints()
		end
		return
	end
	if model and hum0 and (hum0.Health > 0) then
		model:BreakJoints()
		hum0.Health = 0
	end
	if antirespawn then
		respawnrequest()
	end
end)
sg:SetCore("ResetButtonCallback", rb)

tdelay(0, function()
	while c do
		if hum0 and hum1 then
			hum1.Jump = hum0.Jump
		end
		wait()
	end
	sg:SetCore("ResetButtonCallback", true)
end)

R15toR6 = R15toR6 and hum1 and (hum1.RigType == Enum.HumanoidRigType.R15)
if R15toR6 then
	local part = gp(c, "HumanoidRootPart", "BasePart")
		or gp(c, "UpperTorso", "BasePart")
		or gp(c, "LowerTorso", "BasePart")
		or gp(c, "Head", "BasePart")
		or c:FindFirstChildWhichIsA("BasePart")
	if part then
		local cfr = part.CFrame
		local R6parts = {
			head = {
				Name = "Head",
				Size = v3(2, 1, 1),
				R15 = {
					Head = 0,
				},
			},
			torso = {
				Name = "Torso",
				Size = v3(2, 2, 1),
				R15 = {
					UpperTorso = 0.2,
					LowerTorso = -0.8,
				},
			},
			root = {
				Name = "HumanoidRootPart",
				Size = v3(2, 2, 1),
				R15 = {
					HumanoidRootPart = 0,
				},
			},
			leftArm = {
				Name = "Left Arm",
				Size = v3(1, 2, 1),
				R15 = {
					LeftHand = -0.849,
					LeftLowerArm = -0.174,
					LeftUpperArm = 0.415,
				},
			},
			rightArm = {
				Name = "Right Arm",
				Size = v3(1, 2, 1),
				R15 = {
					RightHand = -0.849,
					RightLowerArm = -0.174,
					RightUpperArm = 0.415,
				},
			},
			leftLeg = {
				Name = "Left Leg",
				Size = v3(1, 2, 1),
				R15 = {
					LeftFoot = -0.85,
					LeftLowerLeg = -0.29,
					LeftUpperLeg = 0.49,
				},
			},
			rightLeg = {
				Name = "Right Leg",
				Size = v3(1, 2, 1),
				R15 = {
					RightFoot = -0.85,
					RightLowerLeg = -0.29,
					RightUpperLeg = 0.49,
				},
			},
		}
		for i, v in pairs(getchildren(c)) do
			if isa(v, "BasePart") then
				for i1, v1 in pairs(getchildren(v)) do
					if isa(v1, "Motor6D") then
						v1.Part0 = nil
					end
				end
			end
		end
		part.Archivable = true
		for i, v in pairs(R6parts) do
			local part = clone(part)
			part:ClearAllChildren()
			part.Name, part.Size, part.CFrame, part.Anchored, part.Transparency, part.CanCollide =
				v.Name, v.Size, cfr, false, 1, false
			for i1, v1 in pairs(v.R15) do
				local R15part = gp(c, i1, "BasePart")
				local att = gp(R15part, "att1_" .. i1, "Attachment")
				if R15part then
					local weld = Instance.new("Weld")
					weld.Part0, weld.Part1, weld.C0, weld.C1, weld.Name =
						part, R15part, cf(0, v1, 0), cf_0, "Weld_" .. i1
					weld.Parent = R15part
					R15part.Massless, R15part.Name = true, "R15_" .. i1
					R15part.Parent = part
					if att then
						att.Position = v3(0, v1, 0)
						att.Parent = part
					end
				end
			end
			part.Parent = c
			R6parts[i] = part
		end
		local R6joints = {
			neck = {
				Parent = R6parts.torso,
				Name = "Neck",
				Part0 = R6parts.torso,
				Part1 = R6parts.head,
				C0 = cf(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
				C1 = cf(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
			},
			rootJoint = {
				Parent = R6parts.root,
				Name = "RootJoint",
				Part0 = R6parts.root,
				Part1 = R6parts.torso,
				C0 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
				C1 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
			},
			rightShoulder = {
				Parent = R6parts.torso,
				Name = "Right Shoulder",
				Part0 = R6parts.torso,
				Part1 = R6parts.rightArm,
				C0 = cf(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
				C1 = cf(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
			},
			leftShoulder = {
				Parent = R6parts.torso,
				Name = "Left Shoulder",
				Part0 = R6parts.torso,
				Part1 = R6parts.leftArm,
				C0 = cf(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
				C1 = cf(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
			},
			rightHip = {
				Parent = R6parts.torso,
				Name = "Right Hip",
				Part0 = R6parts.torso,
				Part1 = R6parts.rightLeg,
				C0 = cf(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
				C1 = cf(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
			},
			leftHip = {
				Parent = R6parts.torso,
				Name = "Left Hip",
				Part0 = R6parts.torso,
				Part1 = R6parts.leftLeg,
				C0 = cf(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
				C1 = cf(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
			},
		}
		for i, v in pairs(R6joints) do
			local joint = Instance.new("Motor6D")
			for prop, val in pairs(v) do
				joint[prop] = val
			end
			R6joints[i] = joint
		end
		if hum1 then
			hum1.RigType, hum1.HipHeight = Enum.HumanoidRigType.R6, 0
		end
	end
end

local torso1 = torso
torso = gp(c, "Torso", "BasePart") or (not R15toR6 and gp(c, torso.Name, "BasePart"))
if (typeof(hedafterneck) == "Instance") and head and torso and torso1 then
	local conNeck, conTorso, conTorso1 = nil, nil, nil
	local aligns = {}
	local function enableAligns()
		conNeck:Disconnect()
		conTorso:Disconnect()
		conTorso1:Disconnect()
		for i, v in pairs(aligns) do
			v.Enabled = true
		end
	end
	conNeck = hedafterneck.Changed:Connect(function(prop)
		if table.find({ "Part0", "Part1", "Parent" }, prop) then
			enableAligns()
		end
	end)
	conTorso = torso:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
	conTorso1 = torso1:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
	for i, v in pairs(getdescendants(head)) do
		if isa(v, "AlignPosition") or isa(v, "AlignOrientation") then
			i = tostring(i)
			aligns[i] = v
			v:GetPropertyChangedSignal("Parent"):Connect(function()
				aligns[i] = nil
			end)
			v.Enabled = false
		end
	end
end

local flingpart0 = gp(model, flingpart, "BasePart") or gp(gp(model, flingpart, "Accessory"), "Handle", "BasePart")
local flingpart1 = gp(c, flingpart, "BasePart") or gp(gp(c, flingpart, "Accessory"), "Handle", "BasePart")

local fling = function() end
if flingpart0 and flingpart1 then
	flingpart0:GetPropertyChangedSignal("Parent"):Connect(function()
		if not (flingpart0 and flingpart0.Parent) then
			flingpart0 = nil
			fling = function() end
		end
	end)
	flingpart0.Archivable = true
	flingpart1:GetPropertyChangedSignal("Parent"):Connect(function()
		if not (flingpart1 and flingpart1.Parent) then
			flingpart1 = nil
			fling = function() end
		end
	end)
	local att0 = gp(flingpart0, "att0_" .. flingpart0.Name, "Attachment")
	local att1 = gp(flingpart1, "att1_" .. flingpart1.Name, "Attachment")
	if att0 and att1 then
		att0:GetPropertyChangedSignal("Parent"):Connect(function()
			if not (att0 and att0.Parent) then
				att0 = nil
				fling = function() end
			end
		end)
		att1:GetPropertyChangedSignal("Parent"):Connect(function()
			if not (att1 and att1.Parent) then
				att1 = nil
				fling = function() end
			end
		end)
		local lastfling = nil
		local mouse = lp:GetMouse()
		fling = function(target, duration, rotVelocity)
			if typeof(target) == "Instance" then
				if isa(target, "BasePart") then
					target = target.Position
				elseif isa(target, "Model") then
					target = gp(target, "HumanoidRootPart", "BasePart")
						or gp(target, "Torso", "BasePart")
						or gp(target, "UpperTorso", "BasePart")
						or target:FindFirstChildWhichIsA("BasePart")
					if target then
						target = target.Position
					else
						return
					end
				elseif isa(target, "Humanoid") then
					target = target.Parent
					if not (target and isa(target, "Model")) then
						return
					end
					target = gp(target, "HumanoidRootPart", "BasePart")
						or gp(target, "Torso", "BasePart")
						or gp(target, "UpperTorso", "BasePart")
						or target:FindFirstChildWhichIsA("BasePart")
					if target then
						target = target.Position
					else
						return
					end
				else
					return
				end
			elseif typeof(target) == "CFrame" then
				target = target.Position
			elseif typeof(target) ~= "Vector3" then
				target = mouse.Hit
				if target then
					target = target.Position
				else
					return
				end
			end
			if target.Y < ws.FallenPartsDestroyHeight + 5 then
				target = v3(target.X, ws.FallenPartsDestroyHeight + 5, target.Z)
			end
			lastfling = target
			if type(duration) ~= "number" then
				duration = tonumber(duration) or 0.5
			end
			if typeof(rotVelocity) ~= "Vector3" then
				rotVelocity = v3(20000, 20000, 20000)
			end
			if not (target and flingpart0 and flingpart1 and att0 and att1) then
				return
			end
			flingpart0.Archivable = true
			local flingpart = clone(flingpart0)
			flingpart.Transparency = 1
			flingpart.CanCollide = false
			flingpart.Name = "flingpart_" .. flingpart0.Name
			flingpart.Anchored = true
			flingpart.Velocity = v3_0
			flingpart.RotVelocity = v3_0
			flingpart.Position = target
			flingpart:GetPropertyChangedSignal("Parent"):Connect(function()
				if not (flingpart and flingpart.Parent) then
					flingpart = nil
				end
			end)
			flingpart.Parent = flingpart1
			if flingpart0.Transparency > 0.5 then
				flingpart0.Transparency = 0.5
			end
			att1.Parent = flingpart
			local con = nil
			local rotchg = v3(0, rotVelocity.Unit.Y * -1000, 0)
			con = heartbeat:Connect(function(delta)
				if target and (lastfling == target) then
					if flingpart and flingpart0 and flingpart1 and att0 and att1 then
						flingpart.Orientation = flingpart.Orientation + rotchg * delta
						flingpart0.RotVelocity = rotVelocity
					else
						con:Disconnect()
					end
				else
					con:Disconnect()
				end
			end)
			if alignmode ~= 4 then
				local con = nil
				con = renderstepped:Connect(function()
					if flingpart0 and target then
						flingpart0.RotVelocity = v3_0
					else
						con:Disconnect()
					end
				end)
			end
			twait(duration)
			if lastfling ~= target then
				if flingpart then
					if att1 and (att1.Parent == flingpart) then
						att1.Parent = flingpart1
					end
					pcall(destroy, flingpart)
				end
				return
			end
			target = nil
			if not (flingpart and flingpart0 and flingpart1 and att0 and att1) then
				return
			end
			flingpart0.RotVelocity = v3_0
			att1.Parent = flingpart1
			pcall(destroy, flingpart)
		end
	end
end

task.wait(4)

reanim = workspace.Camera.CameraSubject.Parent

task.wait(0.1)

warn("You're whitelisted, "..game:GetService("Players").LocalPlayer.Name.." :)")

local p = game:GetService("Players").LocalPlayer 
local char = reanim
local mouse = p:GetMouse()
local larm = char:WaitForChild("Left Arm")
local rarm = char:WaitForChild("Right Arm")
local lleg = char:WaitForChild("Left Leg")
local rleg = char:WaitForChild("Right Leg")
local hed = char:WaitForChild("Head")
local torso = char:WaitForChild("Torso")
local root = char:WaitForChild("HumanoidRootPart")
local hum = char:FindFirstChildOfClass("Humanoid")
local debris = game:GetService("Debris")
local input = game:GetService("UserInputService")
local run = game:GetService("RunService")
local rs = run.RenderStepped
local wingpose = "Idle"
local DebrisModel = Instance.new("Model",char)
DebrisModel.Name = "Debris"
repeat rs:wait() until p.CharacterAppearanceLoaded

noidle = false
shift = false
control = false

----------------------------------------------------------------------------

function rswait(value)
  if value ~= nil and value ~= 0 then
    for i=1,value do
     rs:wait()
    end
  else
    rs:wait()
  end
end

----------------------------------------------------------------------------

local timeposition = 0

function music(id)
if id == "Stop" then
if not torso:FindFirstChild("MusicRuin") then
soundz = Instance.new("Sound",torso)
end
soundz:Stop()
else
if not torso:FindFirstChild("MusicRuin") then
soundz = Instance.new("Sound",torso)
for i=1,2 do
local equalizer = Instance.new("EqualizerSoundEffect",soundz)
equalizer.HighGain = 6
equalizer.MidGain = 0
equalizer.LowGain = 6
end
end
soundz.Volume = 10
soundz.Name = "MusicRuin"
soundz.Looped = true
soundz.PlaybackSpeed = 1
soundz.SoundId = "rbxassetid://"..id
soundz:Stop()
soundz:Play()
end
end

----------------------------------------------------------------------------

function lerp(a, b, t)
  return a + (b - a)*t
end

----------------------------------------------------------------------------

function Lerp(c1,c2,al)
  local com1 = {c1.X,c1.Y,c1.Z,c1:toEulerAnglesXYZ()}
  local com2 = {c2.X,c2.Y,c2.Z,c2:toEulerAnglesXYZ()}
  for i,v in pairs(com1) do
    com1[i] = v+(com2[i]-v)*al
  end
  return CFrame.new(com1[1],com1[2],com1[3]) * CFrame.Angles(select(4,unpack(com1)))
end

----------------------------------------------------------------------------

function slerp(a, b, t)
  dot = a:Dot(b)
  if dot > 0.99999 or dot < -0.99999 then
    return t <= 0.5 and a or b
  else
    r = math.acos(dot)
    return (a*math.sin((1 - t)*r) + b*math.sin(t*r)) / math.sin(r)
  end
end

----------------------------------------------------------------------------

function clerp(c1,c2,al)

  local com1 = {c1.X,c1.Y,c1.Z,c1:toEulerAnglesXYZ()}

  local com2 = {c2.X,c2.Y,c2.Z,c2:toEulerAnglesXYZ()}

  for i,v in pairs(com1) do

    com1[i] = lerp(v,com2[i],al)

  end

  return CFrame.new(com1[1],com1[2],com1[3]) * CFrame.Angles(select(4,unpack(com1)))

end

----------------------------------------------------------------------------

function findAllNearestTorso(pos,dist)
    local list = workspace:children()
    local torso = {}
    local temp = nil
    local human = nil
    local temp2 = nil
    for x = 1, #list do
        temp2 = list[x]
        if (temp2.className == "Model") and (temp2 ~= char) then
            temp = temp2:findFirstChild("Torso")
            human = temp2:findFirstChildOfClass("Humanoid")
            if (temp ~= nil) and (human ~= nil) and (human.Health > 0) then
                if (temp.Position - pos).magnitude < dist then
                    table.insert(torso,temp)
                    dist = (temp.Position - pos).magnitude
                end
            end
        end
    end
    return torso
end

----------------------------------------------------------------------------

function checkIfNotPlayer(model)
if model.CanCollide == true and model ~= char and model.Parent ~= char and model.Parent.Parent ~= char and model.Parent.Parent ~= char and model.Parent ~= DebrisModel and model.Parent.Parent ~= DebrisModel and model.Parent.Parent.Parent ~= DebrisModel and model ~= wings and model.Parent ~= wings and model.Parent.Parent ~= wings then
return true
else
return false
end
end

----------------------------------------------------------------------------

function newWeld(wp0, wp1, wc0x, wc0y, wc0z)

  local wld = Instance.new("Weld", wp1)

  wld.Part0 = wp0

  wld.Part1 = wp1

  wld.C0 = CFrame.new(wc0x, wc0y, wc0z)

  return wld

end

function weld(model)
  local parts,last = {}
  local function scan(parent)
    for _,v in pairs(parent:GetChildren()) do
      if (v:IsA("BasePart")) then
        if (last) then
          local w = Instance.new("Weld")
          w.Name = ("%s_Weld"):format(v.Name)
          w.Part0,w.Part1 = last,v
          w.C0 = last.CFrame:inverse()
          w.C1 = v.CFrame:inverse()
          w.Parent = last
        end
        last = v
        table.insert(parts,v)
      end
      scan(v)
    end
  end
  scan(model)
  for _,v in pairs(parts) do
        v.Anchored = false
        v.Locked = true
        v.Anchored = false
        v.BackSurface = Enum.SurfaceType.SmoothNoOutlines
        v.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
        v.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
        v.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
        v.RightSurface = Enum.SurfaceType.SmoothNoOutlines
        v.TopSurface = Enum.SurfaceType.SmoothNoOutlines
        v.CustomPhysicalProperties = PhysicalProperties.new(0,0,0)
  end
end

----------------------------------------------------------------------------

function calculate(part,asd)
local Head = hed
local RightShoulder = asd
local RightArm = part
local MousePosition = mouse.Hit.p
local ToMouse = (MousePosition - Head.Position).unit
local Angle = math.acos(ToMouse:Dot(Vector3.new(0, 1, 0)))
local FromRightArmPos = (Head.Position + Head.CFrame:vectorToWorldSpace(Vector3.new(((Head.Size.X / 2) + (RightArm.Size.X / 2)), ((Head.Size.Y / 2) - (RightArm.Size.Z / 2)), 0)))
local ToMouseRightArm = ((MousePosition - FromRightArmPos) * Vector3.new(1 ,0, 1)).unit
local Look = (Head.CFrame.lookVector * Vector3.new(1, 0, 1)).unit
local LateralAngle = math.acos(ToMouseRightArm:Dot(Look))
if tostring(LateralAngle) == "-1.#IND" then
LateralAngle = 0
end
local Cross = Head.CFrame.lookVector:Cross(ToMouseRightArm)
if LateralAngle > (math.pi / 2) then
LateralAngle = (math.pi / 2)
local Torso = root
local Point = Torso.CFrame:vectorToObjectSpace(mouse.Hit.p-Torso.CFrame.p)
if Point.Z > 0 then
if Point.X > -0 and RightArm == rarm then
Torso.CFrame = CFrame.new(Torso.Position,Vector3.new(mouse.Hit.X,Torso.Position.Y,mouse.Hit.Z))*CFrame.Angles(0,math.rad(110),0)
elseif Point.X < 0 and RightArm == rarm then
Torso.CFrame = CFrame.new(Torso.Position,Vector3.new(mouse.Hit.X,Torso.Position.Y,mouse.Hit.Z))*CFrame.Angles(0,math.rad(-110),0)
end
end
end
if Cross.Y < 0 then
LateralAngle = -LateralAngle
end
return(CFrame.Angles(((math.pi / 2) - Angle), ((math.pi / 2) + LateralAngle), math.pi/2))
end

----------------------------------------------------------------------------

function sound(id,position,vol,pitch,start,finish)
  coroutine.resume(coroutine.create(function()

  local part = Instance.new("Part",workspace)
  part.Position = position
  part.Size = Vector3.new(0,0,0)
  part.CanCollide = false
  part.Transparency = 1

  local sound = Instance.new("Sound",part)

  sound.SoundId = "rbxassetid://"..id

  repeat rs:wait() until sound.IsLoaded
  
  if vol ~= nil then
    sound.Volume = vol
  end

  if pitch ~= nil then
    sound.PlaybackSpeed = pitch
  end

  if start ~= nil then
    sound.TimePosition = start
  end

  if finish ~= nil then
    debris:AddItem(part,finish-start)
  else
    debris:AddItem(part,sound.TimeLength)
  end
  
  sound:Play()  

  return sound

  end))
end

----------------------------------------------------------------------------

function computeDirection(vec)
local lenSquared = vec.magnitude * vec.magnitude
local invSqrt = 1 / math.sqrt(lenSquared)
return Vector3.new(vec.x * invSqrt, vec.y * invSqrt, vec.z * invSqrt)
end

----------------------------------------------------------------------------

local shaking = 0
function shake(num) if num > shaking then shaking = num end end
game:GetService("RunService").RenderStepped:connect(function()
hum.CameraOffset = Vector3.new(math.random(-1,1),math.random(-1,1),math.random(-1,1))*(shaking/100)
if shaking > 0 then shaking = shaking - 1 else shaking = 0 end
end)

plr = game:GetService("Players").LocalPlayer
DebrisModel = Instance.new("Model",plr.Character)
DebrisModel.Name = "DebrisModel"

function Effect(mesh,size,transparency,material,color,position,rotation,positionchange,sizechange,rotationchange,transparencychange,acceleration)
 
 local part = Instance.new("Part",DebrisModel)
  part.Anchored = true
  part.CanCollide = false
  part.Size = Vector3.new(1,1,1)
  part.Transparency = transparency
  part.Material = material
  part.Color = color
  part.CFrame = CFrame.new(position)*CFrame.Angles(math.rad(rotation.X),math.rad(rotation.Y),math.rad(rotation.Z))

 local partmesh = Instance.new("SpecialMesh",part)
  if tonumber(mesh) == nil then partmesh.MeshType = mesh else partmesh.MeshId = "rbxassetid://"..mesh end
  partmesh.Scale = size

 local pvalue = Instance.new("Vector3Value",part)
  pvalue.Name = "Position"
  pvalue.Value = positionchange

 local svalue = Instance.new("Vector3Value",part)
  svalue.Name = "Size"
  svalue.Value = sizechange

 local rvalue = Instance.new("Vector3Value",part)
  rvalue.Name = "Rotation"
  rvalue.Value = rotationchange
  
 local tvalue = Instance.new("NumberValue",part)
  tvalue.Name = "Transparency"
  tvalue.Value = transparencychange

 local avalue = Instance.new("NumberValue",part)
  avalue.Name = "Acceleration"
  avalue.Value = acceleration
 
 part.Name = "EFFECT"
 
 return part

end

game:GetService("RunService").RenderStepped:connect(function()
coroutine.resume(coroutine.create(function()

 for i, v in pairs(DebrisModel:GetChildren()) do
  if v:isA("BasePart") then
   v.LocalTransparencyModifier = 0
  end
 end

 if not plr.Character:FindFirstChild("DebrisModel") then
  DebrisModel = Instance.new("Model",plr.Character)
  DebrisModel.Name = "DebrisModel"
 end

 for i,v in pairs(DebrisModel:GetChildren()) do
  if v:IsA("BasePart") and v.Name == "EFFECT" then
   local pvalue = v:FindFirstChild("Position").Value
   local svalue = v:FindFirstChild("Size").Value
   local rvalue = v:FindFirstChild("Rotation").Value
   local tvalue = v:FindFirstChild("Transparency").Value
   local avalue = v:FindFirstChild("Acceleration").Value
   local mesh = v:FindFirstChild("Mesh")
   mesh.Scale = mesh.Scale + svalue
   v:FindFirstChild("Size").Value = v:FindFirstChild("Size").Value + (Vector3.new(1,1,1)*avalue)
   v.Transparency = v.Transparency + tvalue
   v.CFrame = CFrame.new(pvalue)*v.CFrame*CFrame.Angles(math.rad(rvalue.X),math.rad(rvalue.Y),math.rad(rvalue.Z))
   if v.Transparency >= 1 or mesh.Scale.X < 0 or mesh.Scale.Y < 0 or mesh.Scale.Z < 0 then
     v:Destroy()
   end
  end
 end

end))
end)

local wsback = 0
local frozen = false
function freeze()
if frozen == false then
frozen = true
wsback = hum.WalkSpeed
hum.WalkSpeed = 1
else
frozen = false
hum.WalkSpeed = wsback
end
end
hum.WalkSpeed = 25

function Lightning(Part0,Part1,Times,Offset,Color,Thickness,Trans)
    local magz = (Part0 - Part1).magnitude
    local curpos = Part0
    local trz = {-Offset,Offset} 
    for i=1,Times do
        local li = Instance.new("Part", DebrisModel)
        li.TopSurface =0
        li.Material = Enum.Material.Neon
        li.BottomSurface = 0
        li.Anchored = true
        li.Locked = true
        li.Transparency = Trans or 0.4
        li.Color = Color
        li.formFactor = "Custom"
        li.CanCollide = false
        li.Size = Vector3.new(Thickness,Thickness,magz/Times)
        local lim = Instance.new("BlockMesh",li)
        local Offzet = Vector3.new(trz[math.random(1,2)],trz[math.random(1,2)],trz[math.random(1,2)])
        local trolpos = CFrame.new(curpos,Part1)*CFrame.new(0,0,magz/Times).p+Offzet
        if Times == i then
        local magz2 = (curpos - Part1).magnitude
        li.Size = Vector3.new(Thickness,Thickness,magz2)
        li.CFrame = CFrame.new(curpos,Part1)*CFrame.new(0,0,-magz2/2)
        else
        li.CFrame = CFrame.new(curpos,trolpos)*CFrame.new(0,0,magz/Times/2)
        end
        curpos = li.CFrame*CFrame.new(0,0,magz/Times/2).p
        li.Name = "LIGHTNING"
    end
end

----------------------------------------------------------------------------
skin_color = BrickColor.new("Light orange")
--p:ClearCharacterAppearance()
--hed:WaitForChild("face"):Destroy()
----------------------------------------------------------------------------
local size = 1

newWeld(torso, larm, -1.5, 0.5, 0)
larm.Weld.C1 = CFrame.new(0, 0.5, 0)
newWeld(torso, rarm, 1.5, 0.5, 0)
rarm.Weld.C1 = CFrame.new(0, 0.5, 0)
newWeld(torso, hed, 0, 1.5, 0)
newWeld(torso, lleg, -0.5, -1, 0)
lleg.Weld.C1 = CFrame.new(0, 1, 0)
newWeld(torso, rleg, 0.5, -1, 0)
rleg.Weld.C1 = CFrame.new(0, 1, 0)
newWeld(root, torso, 0, -1, 0)
torso.Weld.C1 = CFrame.new(0, -1, 0)

emitters={}

----------------------------------------------------------------------------------------
music(288494027)
velocityYFall=0
velocityYFall2=0
velocityYFall3=0
velocityYFall4=0
neckrotY=0
neckrotY2=0
torsorotY=0
torsorotY2=0
torsoY=0
torsoY2=0
colored = 0
sine = 0
change=0.4
movement=10
timeranim=0
running = false
jumped = false
icolor=1
imode=false

didjump = false
jumppower = 0
debounceimpact = false

function jumpimpact()
if debounceimpact == false then
debounceimpact = true
if jumppower < -150 then jumppower = -150 end
shake(-jumppower/5)
for i=1,-jumppower/20 do rs:wait()
hed.Weld.C1 = Lerp(hed.Weld.C1, CFrame.Angles(0,0,0), 0.05)
torso.Weld.C0 = Lerp(torso.Weld.C0, CFrame.new(0, (jumppower/20)-hum.HipHeight, 0) * CFrame.Angles(math.rad(0),math.rad(0), math.rad(0)), 0.05)
end
debounceimpact = false
end
end

max = 0

rs:connect(function()

for i,v in pairs(DebrisModel:GetChildren()) do
if v.Name == "LIGHTNING" then
local vm = v:FindFirstChildOfClass("BlockMesh")
vm.Scale = vm.Scale - Vector3.new(0.1,0.1,0)
if vm.Scale.X <= 0 then
v:Destroy()
end
end
end

if p.Character.Parent == nil then
local model = Instance.new("Model")
model.Name = p.Name
p.Character = model
for i,v in pairs(char:GetChildren()) do
v.Parent = reanim
end
end

char = reanim
if p.Character.Parent ~= workspace then
p.Character.Parent = workspace
end
for i,v in pairs(char:GetChildren()) do
if v:IsA("Accoutrement") then
if v.Handle:FindFirstChild("Mesh") then
v.Handle:FindFirstChild("Mesh").Offset = Vector3.new()
v.Handle.Transparency = 0
end
elseif v:IsA("BasePart") then
v.Anchored = false
if v:FindFirstChildOfClass("BodyPosition") then
v:FindFirstChildOfClass("BodyPosition"):Destroy()
end
if v:FindFirstChildOfClass("BodyVelocity") then
v:FindFirstChildOfClass("BodyVelocity"):Destroy()
end
if v:FindFirstChildOfClass("BodyGyro") and v:FindFirstChildOfClass("BodyGyro").Name ~= "lolnochara" then
v:FindFirstChildOfClass("BodyGyro"):Destroy()
end
if v:FindFirstChild("Mesh") then
v:FindFirstChild("Mesh").Offset = Vector3.new()
end
if not DebrisModel:FindFirstChild(v.Name.."FORCEFIELD") then
local force = Instance.new("Part",DebrisModel)
force.Name = v.Name.."FORCEFIELD"
if v ~= hed then
force.Size = v.Size+(Vector3.new(1,1,1)*0.2)
else
force.Size = (Vector3.new(1,1,1)*v.Size.Y)+(Vector3.new(1,1,1)*0.2)
end
force.CanCollide = false
force.Transparency = 1
force.Color = Color3.new(0,1,1)
force.Material = Enum.Material.Neon
newWeld(v,force,0,0,0)
else
if not DebrisModel:FindFirstChild(v.Name.."FORCEFIELD"):FindFirstChildOfClass("Weld") then
newWeld(v,DebrisModel:FindFirstChild(v.Name.."FORCEFIELD"),0,0,0)
end
end
if v.Name ~= "HumanoidRootPart" then
v.Transparency = 0
else
v.Transparency = 1
end
end
end

if -root.Velocity.Y/1.5 > -5 and -root.Velocity.Y/1.5 < 150 then
velocityYFall = root.Velocity.Y/1.5
else
if -root.Velocity.Y/1.5 < -5 then
velocityYFall = 5
elseif -root.Velocity.Y/1.5 > 150 then
velocityYFall = -150
end
end

if -root.Velocity.Y/180 > 0 and -root.Velocity.Y/180 < 1.2 then
velocityYFall2 = root.Velocity.Y/180
else
if -root.Velocity.Y/180 < 0 then
velocityYFall2 = 0
elseif -root.Velocity.Y/180 > 1.2 then
velocityYFall2 = -1.2
end
end

if -root.Velocity.Y/1.5 > -5 and -root.Velocity.Y/1.5 < 50 then
velocityYFall3 = root.Velocity.Y/1.5
else
if -root.Velocity.Y/1.5 < -5 then
velocityYFall3 = 5
elseif -root.Velocity.Y/1.5 > 50 then
velocityYFall3 = -50
end
end

if -root.Velocity.Y/1.5 > -50 and -root.Velocity.Y/1.5 < 20 then
velocityYFall4 = root.Velocity.Y/1.5
else
if -root.Velocity.Y/180 < -5 then
velocityYFall4 = 5
elseif -root.Velocity.Y/180 > 50 then
velocityYFall4 = -50
end
end

if root.RotVelocity.Y/6 < 1 and root.RotVelocity.Y/6 > -1 then
neckrotY = root.RotVelocity.Y/6
else
if root.RotVelocity.Y/6 < -1 then
neckrotY = -1
elseif root.RotVelocity.Y/6 > 1 then
neckrotY = 1
end
end

if root.RotVelocity.Y/8 < 0.6 and root.RotVelocity.Y/8 > -0.6 then
neckrotY2 = root.RotVelocity.Y/8
else
if root.RotVelocity.Y/8 < -0.6 then
neckrotY2 = -0.6
elseif root.RotVelocity.Y/8 > 0.6 then
neckrotY2 = 0.6
end
end

if root.RotVelocity.Y/6 < 0.2 and root.RotVelocity.Y/6 > -0.2 then
torsorotY = root.RotVelocity.Y/6
else
if root.RotVelocity.Y/6 < -0.2 then
torsorotY = -0.2
elseif root.RotVelocity.Y/6 > 0.2 then
torsorotY = 0.2
end
end

if root.RotVelocity.Y/8 < 0.2 and root.RotVelocity.Y/8 > -0.2 then
torsorotY2 = root.RotVelocity.Y/8
else
if root.RotVelocity.Y/8 < -0.2 then
torsorotY2 = -0.2
elseif root.RotVelocity.Y/8 > 0.2 then
torsorotY2 = 0.2
end
end

torsoY = -(torso.Velocity*Vector3.new(1, 0, 1)).magnitude/20
torsoY2 = -(torso.Velocity*Vector3.new(1, 0, 1)).magnitude/36

local ray1 = Ray.new(root.Position+Vector3.new(size,0,0),Vector3.new(0, -4, 0))
local part1, endPoint = workspace:FindPartOnRay(ray1, char)

local ray2 = Ray.new(root.Position-Vector3.new(size,0,0),Vector3.new(0, -4, 0))
local part2, endPoint = workspace:FindPartOnRay(ray2, char)

local ray3 = Ray.new(root.Position+Vector3.new(0,0,size/2),Vector3.new(0, -4, 0))
local part3, endPoint = workspace:FindPartOnRay(ray3, char)

local ray4 = Ray.new(root.Position-Vector3.new(0,0,size/2),Vector3.new(0, -4, 0))
local part4, endPoint = workspace:FindPartOnRay(ray4, char)

local ray5 = Ray.new(root.Position+Vector3.new(size,0,size/2),Vector3.new(0, -4, 0))
local part5, endPoint = workspace:FindPartOnRay(ray5, char)

local ray6 = Ray.new(root.Position-Vector3.new(size,0,size/2),Vector3.new(0, -4, 0))
local part6, endPoint = workspace:FindPartOnRay(ray6, char)

local ray7 = Ray.new(root.Position+Vector3.new(size,0,-size/2),Vector3.new(0, -4, 0))
local part7, endPoint = workspace:FindPartOnRay(ray7, char)

local ray8 = Ray.new(root.Position-Vector3.new(size,0,-size/2),Vector3.new(0, -4, 0))
local part8, endPoint = workspace:FindPartOnRay(ray8, char)

local ray = Ray.new(root.Position,Vector3.new(0, -6, 0))
local part, endPoint = workspace:FindPartOnRay(ray, char)

if part1 or part2 or part3 or part4 or part5 or part6 or part7 or part8 then jumped = false else endPoint = 0 jumped = true end

local rlegray = Ray.new(rleg.Position+Vector3.new(0,size/2,0),Vector3.new(0, -1.75, 0))
local rlegpart, rlegendPoint = workspace:FindPartOnRay(rlegray, char)

local llegray = Ray.new(lleg.Position+Vector3.new(0,size/2,0),Vector3.new(0, -1.75, 0))
local llegpart, llegendPoint = workspace:FindPartOnRay(llegray, char)

if hum.Health > 0 and noidle == false then
if hum.Sit == false then
if (torso.Velocity*Vector3.new(1, 0, 1)).magnitude >= 5 and jumped == false then
hed.Weld.C0 = Lerp(hed.Weld.C0, CFrame.new(0, 1.5, -.2) * CFrame.Angles(math.rad((torso.Velocity*Vector3.new(1, 0, 1)).magnitude/35),torsorotY, math.rad(0)+torsorotY), 0.4)
hed.Weld.C1 = Lerp(hed.Weld.C1, CFrame.Angles((change/10)*math.cos(sine/2)+0.1,-(change/10)*math.cos(sine/4)-(torsorotY/5),(change/5)*math.cos(sine/4)), 0.1)
rarm.Weld.C0 = Lerp(rarm.Weld.C0, CFrame.new(1.5,0.62-(movement/40)*math.cos(sine/4)/3,(movement/150)+(movement/40)*math.cos(sine/4))*CFrame.Angles(math.rad(-5-(movement*2)*math.cos(sine/4))+ -(movement/10)*math.sin(sine/4)*2,math.rad(0-(movement*2)*math.cos(sine/4)),math.rad(0)), 0.2)
larm.Weld.C0 = Lerp(larm.Weld.C0, CFrame.new(-1.5,0.62+(movement/40)*math.cos(sine/4)/3,(movement/150)-(movement/40)*math.cos(sine/4))*CFrame.Angles(math.rad(-5+(movement*2)*math.cos(sine/4))+ (movement/10)*math.sin(sine/4)*2,math.rad(0-(movement*2)*math.cos(sine/4)),math.rad(0)), 0.2)
torso.Weld.C0 = Lerp(torso.Weld.C0, CFrame.new(0, -0.5+(change*2)*math.sin(sine/2), 0) * CFrame.Angles(math.rad(30+(change*20)-(movement/20)*math.cos(sine/2)), torsorotY2+math.rad(0-20*math.sin(sine/4)), torsorotY2+math.rad(0-1*math.cos(sine/4))), 0.1)
lleg.Weld.C0 = Lerp(lleg.Weld.C0, CFrame.new(-0.5,(-0.85-(movement/15)*math.cos(sine/4)/2),-0.1+(movement/15)*math.cos(sine/4))*CFrame.Angles(math.rad(-50+(change*5)-movement*math.cos(sine/4))+ -(movement/10)*math.sin(sine/4),math.rad(0+(movement*2)*math.cos(sine/4)),math.rad(0)), 0.2)
rleg.Weld.C0 = Lerp(rleg.Weld.C0, CFrame.new(0.5,(-0.85+(movement/15)*math.cos(sine/4)/2),-0.1-(movement/15)*math.cos(sine/4))*CFrame.Angles(math.rad(-50+(change*5)+movement*math.cos(sine/4))+ (movement/10)*math.sin(sine/4),math.rad(0+(movement*2)*math.cos(sine/4)),math.rad(0)), 0.2)
elseif jumped == true then
didjump = true
jumppower = root.Velocity.Y
hed.Weld.C0 = Lerp(hed.Weld.C0, CFrame.new(0, 1.5, -.1) * CFrame.Angles(0,0,0), 0.4)
hed.Weld.C1 = Lerp(hed.Weld.C1, CFrame.Angles(0,0,0), 0.1)
larm.Weld.C0 = Lerp(larm.Weld.C0, CFrame.new(-1.5,0.55,0) * CFrame.Angles(math.rad(0),math.rad(0), math.rad(0)), 0.1)
rarm.Weld.C0 = Lerp(rarm.Weld.C0, CFrame.new(1.5,0.55,0) * CFrame.Angles(math.rad(0),math.rad(0), math.rad(0)), 0.1)
torso.Weld.C0 = CFrame.new(0, -1, 0) * CFrame.Angles(math.rad(math.random(-90,90)),math.rad(0), math.rad(math.random(-180,180)))
lleg.Weld.C0 = Lerp(lleg.Weld.C0, CFrame.new(-0.5,-0.925,0) * CFrame.Angles(math.rad(0),math.rad(0), math.rad(0)), 0.1)
rleg.Weld.C0 = Lerp(rleg.Weld.C0, CFrame.new(0.5,0,-0.8) * CFrame.Angles(math.rad(0),math.rad(0), math.rad(0)), 0.1)
elseif (torso.Velocity*Vector3.new(1, 0, 1)).magnitude < 5 then
hed.Weld.C0 = Lerp(hed.Weld.C0, CFrame.new(0, 1.5, -.1), 0.4)
hed.Weld.C1 = Lerp(hed.Weld.C1, CFrame.Angles(math.rad(0+50*math.sin(sine/4)),0,0), 0.1)
larm.Weld.C0 = Lerp(larm.Weld.C0, CFrame.new(-1.5,0.55,-0.05-0.2*math.cos(sine/4))*CFrame.Angles(math.rad(0+80*math.sin(sine/4)),math.rad(-5-5*math.sin(sine/8)),math.rad(-6+2*math.cos(sine/8))), 0.2)
rarm.Weld.C0 = Lerp(rarm.Weld.C0, CFrame.new(1.5,0.55,-0.05-0.2*math.cos(sine/4))*CFrame.Angles(math.rad(0+80*math.sin(sine/4)),math.rad(5+5*math.sin(sine/8)),math.rad(6-2*math.cos(sine/8))), 0.2)
torso.Weld.C0 = Lerp(torso.Weld.C0, CFrame.new(0, -1.1-hum.HipHeight, 0+2*math.cos(sine/4)) * CFrame.Angles(math.rad(0-80*math.cos(sine/4)),math.rad(0), math.rad(0-1*math.cos(sine/32))), 0.1)
lleg.Weld.C0 = Lerp(lleg.Weld.C0, CFrame.new(0,llegendPoint.Y-lleg.Position.Y,0)*CFrame.new(-0.5,0,0)*CFrame.Angles(math.rad(0+120*math.cos(sine/4)),math.rad(10),math.rad(-5+1*math.cos(sine/16))), 0.1)
rleg.Weld.C0 = Lerp(rleg.Weld.C0, CFrame.new(0,rlegendPoint.Y-rleg.Position.Y,0)*CFrame.new(0.5,0,0)*CFrame.Angles(math.rad(0+120*math.cos(sine/4)),math.rad(-10),math.rad(5+1*math.cos(sine/16))), 0.1)
end

else
hed.Weld.C0 = Lerp(hed.Weld.C0, CFrame.new(0, 1.5, -.1), 0.4)
hed.Weld.C1 = Lerp(hed.Weld.C1, CFrame.Angles(0.05*math.sin(sine/16)+0.15,0.05*math.cos(sine/32),0.01*math.cos(sine/32)), 0.1)
larm.Weld.C0 = Lerp(larm.Weld.C0, CFrame.new(-1.5,0.55-(0.1)*math.cos(sine/16)/3,-0.05-0.1*math.cos(sine/16))*CFrame.Angles(math.rad(-2+4*math.sin(sine/16)),math.rad(-5-5*math.sin(sine/16)),math.rad(-6+2*math.cos(sine/16))), 0.2)
rarm.Weld.C0 = Lerp(rarm.Weld.C0, CFrame.new(1.5,0.55-(0.1)*math.cos(sine/16)/3,-0.05-0.1*math.cos(sine/16))*CFrame.Angles(math.rad(-2+4*math.sin(sine/16)),math.rad(5+5*math.sin(sine/16)),math.rad(6-2*math.cos(sine/16))), 0.2)
torso.Weld.C0 = Lerp(torso.Weld.C0, CFrame.new(0, -1.4-(0.1)*math.cos(sine/16)-hum.HipHeight, 0) * CFrame.Angles(math.rad(0-2*math.cos(sine/16)),math.rad(0), math.rad(0-1*math.cos(sine/32))), 0.1)
lleg.Weld.C0 = Lerp(lleg.Weld.C0, CFrame.new(-0.5,-0.55+(0.1)*math.cos(sine/16),0)*CFrame.Angles(math.rad(80+2*math.cos(sine/16)),math.rad(4),math.rad(-2+1*math.cos(sine/32))), 0.2)
rleg.Weld.C0 = Lerp(rleg.Weld.C0, CFrame.new(0.5,-0.55+(0.1)*math.cos(sine/16),0)*CFrame.Angles(math.rad(80+2*math.cos(sine/16)),math.rad(-4),math.rad(2+1*math.cos(sine/32))), 0.2)
end

end
if didjump == true and jumped == false and jumppower < 0 then
didjump = false
jumpimpact()
end

sine = sine + change
hum.Health = math.huge
hum.MaxHealth = math.huge
   end,
})



   
